# -*- coding: utf-8 -*-
"""synthetic_data_generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W-ZMw3mj6jXpT20YmoZpdN9dDb1vxEuD
"""

import pandas as pd

# Load the dataframe.
df = pd.read_csv('/content/grid_asset_data.csv')

# Clean Dataset
df['Fault_Event'] = df['Fault_Event'].fillna('No fault')
df = df.drop(columns=['Timestamp', 'Substation_ID', 'Asset_ID', 'Reconfig_Action', 'Asset_Type', 'Load_Type'], errors='ignore')
display(df.head())

data_for_synthesis = df[['Energy_Consumed_kWh', 'Voltage_V', 'Current_A', 'Power_kW', 'Frequency_Hz']].copy()
display(data_for_synthesis.head())
display(data_for_synthesis.info())

!pip install sdv

!pip install sdv[tabular]

from sdv.single_table import TVAESynthesizer
from sdv.metadata import SingleTableMetadata
from sdv.sampling import Condition
import pandas as pd

# Define metadata (especially data types)
metadata = SingleTableMetadata()
metadata.detect_from_dataframe(data=df)

# Train model
model = TVAESynthesizer(metadata)
model.fit(df)

# Test
# Conditional sampling - create proper Condition objects
conditions = [
    Condition(
        column_values={'Energy_Consumed_kWh': 0.05},
        num_rows=1  # Specify how many rows you want to generate
    )
]

# Generate synthetic data with conditions
synthetic_data = model.sample_from_conditions(conditions=conditions)

# Display the head of the generated synthetic data DataFrame
display(synthetic_data.head())

# Display the info of the generated synthetic data DataFrame
display(synthetic_data.info())

#Using QualityReport to provide overall score synthetic data quality

# Try alternative import paths
try:
    from sdmetrics.reports.single_table import QualityReport
    print("Found QualityReport in sdmetrics.reports.single_table")

    # Generate synthetic data
    synthetic_data_eval = loaded_model.sample(num_rows=len(df))

    # Create and generate report
    report = QualityReport()
    report.generate(df, synthetic_data_eval, metadata.to_dict())

    print("Overall Quality Score:", report.get_score())

except ImportError:
    print("QualityReport not found in sdmetrics.reports.single_table either")

# Save the trained model
model.save('ctgan_grid_asset_model.pkl')